import streamlit as st
import numpy as np
import pandas as pd
import folium
from streamlit_folium import st_folium
import requests
import base64
from datetime import datetime, timedelta
import geopandas as gpd
from shapely.geometry import Polygon
from fpdf import FPDF
import urllib.parse
import matplotlib.pyplot as plt
import matplotlib.animation as animation
import io

# Configura√ß√µes iniciais do Streamlit
st.set_page_config(
    page_title="Simulador de Propaga√ß√£o de Inc√™ndio",
    page_icon="üî•",
    layout="wide"
)

# Defini√ß√£o dos estados das c√©lulas na simula√ß√£o
VIVO = 0        # Vegeta√ß√£o n√£o queimada
QUEIMANDO = 1   # Vegeta√ß√£o em chamas
QUEIMADO = 2    # Vegeta√ß√£o j√° queimada
RECUPERADO = 3  # Vegeta√ß√£o recuperada ap√≥s o inc√™ndio

# Cores associadas a cada estado para visualiza√ß√£o
colors = {
    VIVO: 'green',
    QUEIMANDO: 'red',
    QUEIMADO: 'black',
    RECUPERADO: 'blue'
}

# Fun√ß√£o para obter dados meteorol√≥gicos usando Open-Meteo API
def obter_dados_meteorologicos(latitude, longitude, data_inicial, data_final):
    # Configurar URL e par√¢metros da API
    data_inicial_str = data_inicial.strftime('%Y-%m-%d')
    data_final_str = data_final.strftime('%Y-%m-%d')
    url = (
        f"https://api.open-meteo.com/v1/forecast?"
        f"latitude={latitude}&longitude={longitude}&"
        f"start_date={data_inicial_str}&end_date={data_final_str}&"
        f"hourly=temperature_2m,relative_humidity_2m,wind_speed_10m"
    )
    
    # Requisi√ß√£o GET
    response = requests.get(url)
    if response.status_code == 200:
        dados = response.json()
        
        # Extrair dados hor√°rios
        horas = dados['hourly']['time']
        temperaturas = dados['hourly']['temperature_2m']
        umidades = dados['hourly']['relative_humidity_2m']
        velocidades_vento = dados['hourly']['wind_speed_10m']

        # Criar DataFrame com os dados extra√≠dos
        df = pd.DataFrame({
            'Data': pd.to_datetime(horas),
            'Temperatura': temperaturas,
            'Umidade': umidades,
            'Vento': velocidades_vento
        })
        return df
    else:
        st.warning(f"Erro ao obter dados meteorol√≥gicos: {response.status_code}")
        return None

# Fun√ß√£o para obter coordenadas de um endere√ßo
def obter_coordenadas_endereco(endereco):
    url = f"https://nominatim.openstreetmap.org/search?q={urllib.parse.quote(endereco)}&format=json&limit=1"
    headers = {'User-Agent': 'SimuladorIncendio/1.0'}
    response = requests.get(url, headers=headers)
    if response.status_code == 200 and response.json():
        resultado = response.json()[0]
        return float(resultado['lat']), float(resultado['lon'])
    else:
        st.error("Endere√ßo n√£o encontrado.")
        return None, None

# Interface do usu√°rio
def main():
    st.title("Simulador de Propaga√ß√£o de Inc√™ndio")
    st.subheader("Automa√ß√£o de Par√¢metros Usando APIs")

    # Vari√°veis iniciais
    meteo_series = None

    # Sele√ß√£o de localiza√ß√£o
    st.header("Sele√ß√£o de Localiza√ß√£o")
    endereco = st.text_input("Digite a localiza√ß√£o (cidade, endere√ßo ou coordenadas):")

    if st.button("Obter Coordenadas"):
        if endereco:
            lat, lon = obter_coordenadas_endereco(endereco)
            if lat and lon:
                st.success(f"Coordenadas: Latitude {lat}, Longitude {lon}")
                st.session_state['latitude'] = lat
                st.session_state['longitude'] = lon
        else:
            st.error("Por favor, insira um endere√ßo v√°lido.")

    # Se coordenadas foram obtidas
    if 'latitude' in st.session_state and 'longitude' in st.session_state:
        lat = st.session_state['latitude']
        lon = st.session_state['longitude']

        # Configura√ß√£o do per√≠odo de an√°lise
        st.header("Per√≠odo de An√°lise")
        data_inicial = st.date_input("Data Inicial", datetime.now() - timedelta(days=7))
        data_final = st.date_input("Data Final", datetime.now())

        # Dados Meteorol√≥gicos
        st.header("Dados Meteorol√≥gicos")
        if st.button("Obter Dados Meteorol√≥gicos"):
            meteo_series = obter_dados_meteorologicos(lat, lon, data_inicial, data_final)
            if meteo_series is not None:
                st.line_chart(meteo_series.set_index('Data'))

if __name__ == '__main__':
    main()
